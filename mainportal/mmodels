# This is an auto-generated Django model module.
# You'll have to do the following manually to clean this up:
#   * Rearrange models' order
#   * Make sure each model has one field with primary_key=True
#   * Make sure each ForeignKey and OneToOneField has `on_delete` set to the desired behavior
#   * Remove `managed = True` lines if you wish to allow Django to create, modify, and delete the table
# Feel free to rename the models, but don't rename db_table values or field names.
from django.db import models


class AuthGroup(models.Model):
    name = models.CharField(unique=True, max_length=150)

    class Meta:
        managed = True
        db_table = 'auth_group'


class AuthGroupPermissions(models.Model):
    id = models.BigAutoField(primary_key=True)
    group = models.ForeignKey(AuthGroup, models.DO_NOTHING)
    permission = models.ForeignKey('AuthPermission', models.DO_NOTHING)

    class Meta:
        managed = True
        db_table = 'auth_group_permissions'
        unique_together = (('group', 'permission'),)


class AuthPermission(models.Model):
    name = models.CharField(max_length=255)
    content_type = models.ForeignKey('DjangoContentType', models.DO_NOTHING)
    codename = models.CharField(max_length=100)

    class Meta:
        managed = True
        db_table = 'auth_permission'
        unique_together = (('content_type', 'codename'),)


class AuthUser(models.Model):
    password = models.CharField(max_length=128)
    last_login = models.DateTimeField(blank=True, null=True)
    is_superuser = models.BooleanField()
    username = models.CharField(unique=True, max_length=150)
    first_name = models.CharField(max_length=150)
    last_name = models.CharField(max_length=150)
    email = models.CharField(max_length=254)
    is_staff = models.BooleanField()
    is_active = models.BooleanField()
    date_joined = models.DateTimeField()

    class Meta:
        managed = True
        db_table = 'auth_user'


class AuthUserGroups(models.Model):
    id = models.BigAutoField(primary_key=True)
    user = models.ForeignKey(AuthUser, models.DO_NOTHING)
    group = models.ForeignKey(AuthGroup, models.DO_NOTHING)

    class Meta:
        managed = True
        db_table = 'auth_user_groups'
        unique_together = (('user', 'group'),)


class AuthUserUserPermissions(models.Model):
    id = models.BigAutoField(primary_key=True)
    user = models.ForeignKey(AuthUser, models.DO_NOTHING)
    permission = models.ForeignKey(AuthPermission, models.DO_NOTHING)

    class Meta:
        managed = True
        db_table = 'auth_user_user_permissions'
        unique_together = (('user', 'permission'),)


class DjangoAdminLog(models.Model):
    action_time = models.DateTimeField()
    object_id = models.TextField(blank=True, null=True)
    object_repr = models.CharField(max_length=200)
    action_flag = models.SmallIntegerField()
    change_message = models.TextField()
    content_type = models.ForeignKey('DjangoContentType', models.DO_NOTHING, blank=True, null=True)
    user = models.ForeignKey(AuthUser, models.DO_NOTHING)

    class Meta:
        managed = True
        db_table = 'django_admin_log'


class DjangoContentType(models.Model):
    app_label = models.CharField(max_length=100)
    model = models.CharField(max_length=100)

    class Meta:
        managed = True
        db_table = 'django_content_type'
        unique_together = (('app_label', 'model'),)


class DjangoMigrations(models.Model):
    id = models.BigAutoField(primary_key=True)
    app = models.CharField(max_length=255)
    name = models.CharField(max_length=255)
    applied = models.DateTimeField()

    class Meta:
        managed = True
        db_table = 'django_migrations'


class DjangoSession(models.Model):
    session_key = models.CharField(primary_key=True, max_length=40)
    session_data = models.TextField()
    expire_date = models.DateTimeField()

    class Meta:
        managed = True
        db_table = 'django_session'


class Groups(models.Model):
    name = models.CharField(max_length=-1, blank=True, null=True)

    class Meta:
        managed = True
        db_table = 'groups'


class IndexpageOrder(models.Model):
    id = models.BigAutoField(primary_key=True)
    num_proc = models.CharField(max_length=10)
    link_proc = models.CharField(max_length=500)
    partner = models.CharField(max_length=512)
    summ_proc = models.IntegerField()
    count_order = models.IntegerField()
    subj_proc = models.CharField(max_length=512)
    actual_for_me = models.IntegerField()
    add_date = models.DateTimeField()
    end_date = models.DateTimeField()

    class Meta:
        managed = True
        db_table = 'indexpage_order'


class Laws(models.Model):
    full_name = models.CharField(max_length=-1)

    class Meta:
        managed = True
        db_table = 'laws'


class Marketplaces(models.Model):
    full_name = models.CharField(max_length=-1, blank=True, null=True)
    link = models.CharField(max_length=-1, blank=True, null=True)

    class Meta:
        managed = True
        db_table = 'marketplaces'


class Orgs(models.Model):
    full_name = models.CharField(max_length=-1, blank=True, null=True)
    short_name = models.CharField(max_length=-1, blank=True, null=True)
    email = models.CharField(max_length=-1, blank=True, null=True)
    phone = models.CharField(max_length=-1, blank=True, null=True)
    url = models.CharField(max_length=-1, blank=True, null=True)
    inn = models.CharField(max_length=-1, blank=True, null=True)
    cod_reestr = models.CharField(max_length=-1, blank=True, null=True)
    date_reg = models.DateTimeField(blank=True, null=True)
    date_last_change = models.DateTimeField(blank=True, null=True)
    kpp = models.CharField(max_length=-1, blank=True, null=True)
    ogrn = models.CharField(max_length=-1, blank=True, null=True)
    oktmo = models.CharField(max_length=-1, blank=True, null=True)
    iku = models.CharField(max_length=-1, blank=True, null=True)
    date_iku = models.DateTimeField(blank=True, null=True)
    address = models.CharField(max_length=-1, blank=True, null=True)

    class Meta:
        managed = True
        db_table = 'orgs'


class Peoples(models.Model):
    full_name = models.CharField(max_length=-1, blank=True, null=True)
    surname = models.CharField(max_length=-1, blank=True, null=True)
    name = models.CharField(max_length=-1, blank=True, null=True)
    name2 = models.CharField(max_length=-1, blank=True, null=True)
    email = models.CharField(max_length=-1, blank=True, null=True)
    created_at = models.DateTimeField(blank=True, null=True)
    org = models.ForeignKey(Orgs, models.DO_NOTHING, blank=True, null=True)

    class Meta:
        managed = True
        db_table = 'peoples'


class Procedures(models.Model):
    places = models.ForeignKey(Marketplaces, models.DO_NOTHING, blank=True, null=True)
    law = models.ForeignKey(Laws, models.DO_NOTHING, db_column='law')
    type_proc = models.ForeignKey('TypesProc', models.DO_NOTHING, db_column='type_proc')
    orgs = models.ForeignKey(Orgs, models.DO_NOTHING, blank=True, null=True)
    subject = models.CharField(max_length=-1, blank=True, null=True)
    date_start = models.DateTimeField(blank=True, null=True)
    date_end = models.DateTimeField(blank=True, null=True)
    date_proc = models.DateTimeField(blank=True, null=True)
    tradeplace = models.ForeignKey('Tradeplaces', models.DO_NOTHING, db_column='tradeplace')
    stage = models.ForeignKey('Stages', models.DO_NOTHING, db_column='stage')
    created_at = models.DateTimeField(blank=True, null=True)

    class Meta:
        managed = True
        db_table = 'procedures'


class Stages(models.Model):
    full_name = models.AutoField()

    class Meta:
        managed = True
        db_table = 'stages'


class Tradeplaces(models.Model):
    full_name = models.CharField(max_length=-1)

    class Meta:
        managed = True
        db_table = 'tradeplaces'


class TypesProc(models.Model):
    full_name = models.CharField(max_length=-1)

    class Meta:
        managed = True
        db_table = 'types_proc'


class Users(models.Model):
    full_name = models.CharField(max_length=-1, blank=True, null=True)
    password = models.CharField(max_length=-1, blank=True, null=True)
    email = models.CharField(max_length=-1, blank=True, null=True)
    created_at = models.DateTimeField(blank=True, null=True)
    group = models.ForeignKey(Groups, models.DO_NOTHING, blank=True, null=True)

    class Meta:
        managed = True
        db_table = 'users'
